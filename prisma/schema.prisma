generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Role {
  user
  admin
  superadmin
  disabled
}

enum NotificationType {
  push
  email
  whatsapp
}

model Tenant {
  id           String        @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  image        String?
  users        User[]
  products     Product[]
  categories   Category[]
  subscription Subscription?

  Alert    Alert[]
  PrintLog PrintLog[]
}

model User {
  id                    String             @id @default(auto()) @map("_id") @db.ObjectId
  name                  String?
  email                 String?            @unique
  emailVerified         Boolean?
  image                 String?
  hashedPassword        String?
  resetToken            String?
  resetTokenExpiry      DateTime?
  invitationToken       String?
  invitationTokenExpiry DateTime?
  role                  Role               @default(user)
  status                String             @default("active")
  createdAt             DateTime           @default(now())
  updatedAt             DateTime           @updatedAt
  tenantId              String             @db.ObjectId
  tenant                Tenant             @relation(fields: [tenantId], references: [id])
  setorId               String?            @db.ObjectId
  accounts              Account[]
  logs                  UserActivityLog[]
  pushSubscriptions     PushSubscription[]
}

model PushSubscription {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @db.ObjectId
  endpoint  String   @unique // O endpoint gerado pela API de Push
  keys      Json // As chaves públicas e privadas da notificação (p256dh e auth)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Product {
  id           String     @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  batch        String?
  setting      Int?
  settingUnit  String? // Indica se é "hours" ou "days"
  validity     Int?
  validityUnit String?
  status       String?
  categoryId   String     @db.ObjectId
  isDeleted    Boolean    @default(false) // Novo campo para Soft Delete
  category     Category   @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  tenantId     String     @db.ObjectId
  tenant       Tenant     @relation(fields: [tenantId], references: [id])
  logs         PrintLog[] @relation("PrintLogToProduct")
  alerts       Alert[]

  notifiedSectors   ProductSetorNotify[] // Relacionamento com o modelo de junção
  notificationTypes String[] // Tipos de notificação suportados (usando array de String para suportar múltiplos tipos no MongoDB)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Category {
  id                  String    @id @default(auto()) @map("_id") @db.ObjectId
  name                String
  notificationEnabled Boolean   @default(false) // Indica se produtos nesta categoria ativam notificações
  tenantId            String    @db.ObjectId
  tenant              Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  products            Product[] // Relacionamento com produtos
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  setorId             String?   @db.ObjectId
}

model ProductSetorNotify {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  productId String  @db.ObjectId
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  setorId   String  @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model Alert {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  productId String   @db.ObjectId
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  tenantId  String   @db.ObjectId
  tenant    Tenant   @relation(fields: [tenantId], references: [id])
  setorId   String?  @db.ObjectId
  alertDate DateTime
  quantity  Int
  lotNumber String?
  status    String   @default("pending")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PrintLog {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  productId String   @db.ObjectId
  product   Product  @relation("PrintLogToProduct", fields: [productId], references: [id], onDelete: Cascade)
  tenantId  String   @db.ObjectId
  tenant    Tenant   @relation(fields: [tenantId], references: [id])
  setorId   String?  @db.ObjectId
  printedBy String
  timestamp DateTime @default(now())
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model Plan {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String // Basic, Premium, etc.
  maxProducts Int
  maxUsers    Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())

  subscriptions Subscription[] // Relacionamento com múltiplas assinaturas
}

model Subscription {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  tenantId  String   @unique @db.ObjectId
  tenant    Tenant   @relation(fields: [tenantId], references: [id])
  planId    String   @db.ObjectId
  plan      Plan     @relation(fields: [planId], references: [id])
  startDate DateTime
  endDate   DateTime
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model UserActivityLog {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  action    String
  timestamp DateTime @default(now())
  metadata  Json?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId            String  @db.ObjectId

  @@unique([provider, providerAccountId])
}

model PrinterConfig {
  id                    String   @id @default(auto()) @map("_id") @db.ObjectId // Identificador único da configuração
  tenantId              String   @map("_tenantId") @db.ObjectId // Relacionado ao tenant, não mais único
  name                  String   @map("_name") // Nome da configuração
  paperSize             String   // Tamanho do papel (ex: A4, A5, Carta, Personalizado)
  labelWidth            Float    // Largura da etiqueta (em milímetros)
  labelHeight           Float    // Altura da etiqueta (em milímetros)
  marginTop             Float    // Margem superior da folha (espaço entre o topo da página e a primeira etiqueta)
  horizontalSpacing     Float    // Distância entre as etiquetas na horizontal (espaço entre as etiquetas lado a lado)
  verticalSpacing       Float    // Distância entre as etiquetas na vertical (espaço entre as etiquetas uma embaixo da outra)
  marginBottom          Float    // Margem inferior da folha (espaço entre a última etiqueta e o fim da página)
  marginLeft            Float    // Margem esquerda da folha (espaço entre o lado esquerdo da página e a primeira etiqueta)
  marginRight           Float    // Margem direita da folha (espaço entre o lado direito da página e a última etiqueta)
  fontSize              Float    // Tamanho da fonte nas etiquetas
  fontFamily            String   // Tipo de fonte usada nas etiquetas (ex: Arial, Times New Roman)
  fontColor             String   // Cor da fonte (ex: #000000 para preto)
  boldText              Boolean  // Define se o texto será negrito (bold)
  italicText            Boolean  // Define se o texto será itálico
  rotation              Float    // Ângulo de rotação das etiquetas (ex: 90, 180 graus)
  barcodeEnabled        Boolean  // Define se o código de barras estará habilitado nas etiquetas
  barcodeType           String   // Tipo de código de barras (ex: QR Code, Code 128)
  barcodePosition       String   // Posição do código de barras na etiqueta (acima, abaixo, centro)
  labelBorder           Boolean  // Define se as etiquetas terão bordas
  borderColor           String   // Cor da borda da etiqueta (ex: #FF0000 para vermelho)
  backgroundColor       String   // Cor de fundo da etiqueta (ex: #FFFFFF para branco)
  customImageEnabled    Boolean  // Define se uma imagem personalizada pode ser adicionada na etiqueta
  imagePosition         String   // Posição da imagem personalizada na etiqueta (ex: esquerda, direita, centro)
  imageOpacity          Float    // Opacidade da imagem personalizada (0.0 a 1.0)
  numberOfLabelsPerPage Int      // Número total de etiquetas que cabem por página
  cutLineEnabled        Boolean  // Define se uma linha de corte será impressa ao redor das etiquetas
  useCustomMargins      Boolean  // Define se as margens personalizadas estarão habilitadas
  logoWidth             Float    // Largura da logo da empresa na etiqueta
  logoHeight            Float    // Altura da logo da empresa na etiqueta
  logoTop               Float    // Posição da logo a partir do topo da etiqueta
  logoLeft              Float    // Posição da logo a partir do lado esquerdo da etiqueta
  labelsPerRow          Int      // Número de etiquetas por linha
  labelsPerColumn       Int      // Número de etiquetas por coluna
  createdAt             DateTime @default(now())  // Data e hora em que a configuração foi criada
  updatedAt             DateTime @updatedAt       // Data e hora da última atualização da configuração
}


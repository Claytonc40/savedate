generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Role {
  user
  admin
  superadmin
  disabled
}

enum NotificationType {
  push
  email
  whatsapp
}

model Tenant {
  id           String        @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  image        String?
  users        User[]
  products     Product[]
  categories   Category[]
  subscription Subscription?

  Alert    Alert[]
  PrintLog PrintLog[]
}

model User {
  id                    String             @id @default(auto()) @map("_id") @db.ObjectId
  name                  String?
  email                 String?            @unique
  emailVerified         Boolean?
  image                 String?
  hashedPassword        String?
  resetToken            String?
  resetTokenExpiry      DateTime?
  invitationToken       String?
  invitationTokenExpiry DateTime?
  role                  Role               @default(user)
  status                String             @default("active")
  createdAt             DateTime           @default(now())
  updatedAt             DateTime           @updatedAt
  tenantId              String             @db.ObjectId
  tenant                Tenant             @relation(fields: [tenantId], references: [id])
  setorId               String?            @db.ObjectId
  accounts              Account[]
  logs                  UserActivityLog[]
  pushSubscriptions     PushSubscription[]
}

model PushSubscription {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @db.ObjectId
  endpoint  String   @unique // O endpoint gerado pela API de Push
  keys      Json // As chaves públicas e privadas da notificação (p256dh e auth)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Product {
  id           String     @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  batch        String?
  setting      Int?
  settingUnit  String? // Indica se é "hours" ou "days"
  validity     Int?
  validityUnit String?
  status       String?
  categoryId   String     @db.ObjectId
  isDeleted    Boolean    @default(false) // Novo campo para Soft Delete
  category     Category   @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  tenantId     String     @db.ObjectId
  tenant       Tenant     @relation(fields: [tenantId], references: [id])
  logs         PrintLog[] @relation("PrintLogToProduct")
  alerts       Alert[]

  notifiedSectors   ProductSetorNotify[] // Relacionamento com o modelo de junção
  notificationTypes String[] // Tipos de notificação suportados (usando array de String para suportar múltiplos tipos no MongoDB)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Category {
  id                  String    @id @default(auto()) @map("_id") @db.ObjectId
  name                String
  notificationEnabled Boolean   @default(false) // Indica se produtos nesta categoria ativam notificações
  tenantId            String    @db.ObjectId
  tenant              Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  products            Product[] // Relacionamento com produtos
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  setorId             String?   @db.ObjectId
}

model ProductSetorNotify {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  productId String  @db.ObjectId
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  setorId   String  @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model Alert {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  productId String   @db.ObjectId
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  tenantId  String   @db.ObjectId
  tenant    Tenant   @relation(fields: [tenantId], references: [id])
  setorId   String?  @db.ObjectId
  alertDate DateTime
  quantity  Int
  lotNumber String?
  status    String   @default("pending")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PrintLog {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  productId String   @db.ObjectId
  product   Product  @relation("PrintLogToProduct", fields: [productId], references: [id], onDelete: Cascade)
  tenantId  String   @db.ObjectId
  tenant    Tenant   @relation(fields: [tenantId], references: [id])
  setorId   String?  @db.ObjectId
  printedBy String
  timestamp DateTime @default(now())
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model Plan {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String // Basic, Premium, etc.
  maxProducts Int
  maxUsers    Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())

  subscriptions Subscription[] // Relacionamento com múltiplas assinaturas
}

model Subscription {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  tenantId  String   @unique @db.ObjectId
  tenant    Tenant   @relation(fields: [tenantId], references: [id])
  planId    String   @db.ObjectId
  plan      Plan     @relation(fields: [planId], references: [id])
  startDate DateTime
  endDate   DateTime
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model UserActivityLog {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  action    String
  timestamp DateTime @default(now())
  metadata  Json?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId            String  @db.ObjectId

  @@unique([provider, providerAccountId])
}

model PrinterConfig {
  id                      String   @id @default(auto()) @map("_id") @db.ObjectId
  tenantId                String   @map("_tenantId") @db.ObjectId
  name                    String   @map("_name")
  paperSize               String?
  labelWidth              Float?
  labelHeight             Float?
  marginTop               Float?
  horizontalSpacing       Float?
  verticalSpacing         Float?
  marginBottom            Float?
  marginLeft              Float?
  marginRight             Float?
  
  // Título
  titleFontSize           Float?   // Tamanho da fonte do título
  titleFontFamily         String?  // Família da fonte do título
  titleFontColor          String?  // Cor da fonte do título
  titleBoldText           Boolean? // Negrito no título
  titleItalicText         Boolean? // Itálico no título
  titleUnderline          Boolean? // Sublinhado no título
  titleLineHeight         Float?   // Espaçamento entre linhas do título
  titleAlignment          String?  // Alinhamento do título (left, center, right)

  // Corpo
  bodyFontSize            Float?   // Tamanho da fonte do corpo
  bodyFontFamily          String?  // Família da fonte do corpo
  bodyFontColor           String?  // Cor da fonte do corpo
  bodyBoldText            Boolean? // Negrito no corpo
  bodyItalicText          Boolean? // Itálico no corpo
  bodyUnderline           Boolean? // Sublinhado no corpo
  bodyLineHeight          Float?   // Espaçamento entre linhas do corpo
  bodyAlignment           String?  // Alinhamento do corpo (left, center, right)

  rotation                Float?
  barcodeEnabled          Boolean?
  barcodeType             String?
  barcodePosition         String?
  labelBorder             Boolean?
  borderColor             String?
  backgroundColor         String?
  customImageEnabled      Boolean?
  imagePosition           String?
  imageOpacity            Float?
  numberOfLabelsPerPage   Int?
  cutLineEnabled          Boolean?
  useCustomMargins        Boolean?
  logoWidth               Float?
  logoHeight              Float?
  logoTop                 Float?
  logoLeft                Float?
  labelsPerRow            Int?
  labelsPerColumn         Int?
  lineHeight              Float?

  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt
}

